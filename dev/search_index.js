var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BudanTables","category":"page"},{"location":"#BudanTables","page":"Home","title":"BudanTables","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BudanTables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BudanTables]","category":"page"},{"location":"#BudanTables.budantable","page":"Home","title":"BudanTables.budantable","text":"Plots the Budan's table of a given polynomial (see https://hal.inria.fr/hal-00653762/document). The input is a polynomial of type T for which\n\ndegree(p::T) and derivative(p::T, i::Int) must be defined\nit is compatible with function computing roots (see BudanTables.set_getting_roots).\n\nBy default it uses T==Polynomial from Polynomials.jl.\n\nExamples\n\nUsing Polynomials' types and api:\n\n   using BudanTables\n   using Plots\n\n   using Polynomials\n\n   pp = Polynomial([-1,2,3])\n   budantable(pp)\n\nOr define our own api for julia vectors:\n\n   using BudanTables\n   using Plots\n\n   BudanTables.degree(v::AbstractVector) = length(v) - 1\n\n   BudanTables.derivative(v::AbstractVector) = .*(v[begin+1:end], 1:(length(v)-1))\n   function BudanTables.derivative(v::AbstractVector, i::Int)\n       out = copy(v)\n       while i > 0\n           i-=1\n           out = derivative(out)\n       end\n       return out\n   end\n\n   # PolynomialRoots.jl represents polynomials as julia vectors.\n   import PolynomialRoots as PR\n   BudanTables.set_getting_roots(PR.roots)\n\n   pp = [-1,-2,3,4]\n   budantable(pp)\n\n\n\n\n\n","category":"function"},{"location":"#BudanTables.set_getting_roots-Tuple{Any}","page":"Home","title":"BudanTables.set_getting_roots","text":"set_getting_roots(f)\n\n\nSets the function used to compute the roots of polynomials building a Budan's table. The input is a function f computing the roots of a polynomial represented as an object of type T, for which degree(p::T) and derivative(p::T) must be defined. By default it uses roots from Polynomials.jl.\n\nSee also budantable\n\nExamples\n\nFor polynomials of type Polynomial:\n\n   using Polynomials\n   pp = Polynomial([-1,2,3])\n   import PolynomialRoots as PR # Fast roots\n   # Notice pre-composition with Polynomials' `coeffs`.\n   BudanTables.set_getting_roots(PR.rootsâˆ˜coeffs)\n   budantable(pp)\n\n\n\n\n\n","category":"method"}]
}
